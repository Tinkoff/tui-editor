(self.webpackChunktui_editor=self.webpackChunktui_editor||[]).push([[3988],{83988:n=>{n.exports="import {\n    ChangeDetectionStrategy,\n    Component,\n    Inject,\n    INJECTOR,\n    Injector,\n    ViewChild,\n} from '@angular/core';\nimport {FormControl, Validators} from '@angular/forms';\nimport {DomSanitizer, SafeHtml} from '@angular/platform-browser';\nimport {TUI_IS_E2E, tuiPure, tuiTypedFromEvent} from '@taiga-ui/cdk';\nimport {\n    TUI_ATTACH_FILES_LOADER,\n    TUI_ATTACH_FILES_OPTIONS,\n    TUI_EDITOR_EXTENSIONS,\n    TuiEditorAttachedFile,\n    TuiEditorComponent,\n    TuiEditorTool,\n} from '@tinkoff/tui-editor';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n@Component({\n    selector: 'tui-editor-embed-pdf-example-1',\n    templateUrl: './index.html',\n    styleUrls: ['./index.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        {\n            provide: TUI_EDITOR_EXTENSIONS,\n            deps: [INJECTOR],\n            useFactory: (injector: Injector) => [\n                import('@tinkoff/tui-editor/extensions/starter-kit').then(\n                    ({StarterKit}) => StarterKit,\n                ),\n                import('@tiptap/extension-text-style').then(({TextStyle}) => TextStyle),\n                import('@tinkoff/tui-editor/extensions/link').then(\n                    ({TuiLink}) => TuiLink,\n                ),\n                import('@tinkoff/tui-editor/extensions/file-link').then(\n                    ({TuiFileLink}) => TuiFileLink,\n                ),\n                import('@tinkoff/tui-editor/extensions/iframe-editor').then(\n                    ({createIframeEditorExtension}) =>\n                        createIframeEditorExtension(injector),\n                ),\n            ],\n        },\n        {\n            provide: TUI_ATTACH_FILES_LOADER,\n            deps: [],\n            useFactory:\n                () =>\n                ([file]: File[]): Observable<\n                    Array<TuiEditorAttachedFile<{type: string}>>\n                > => {\n                    const fileReader = new FileReader();\n\n                    // For example, instead of uploading to a file server,\n                    // we convert the result immediately into content to base64\n                    fileReader.readAsDataURL(file);\n\n                    return tuiTypedFromEvent(fileReader, 'load').pipe(\n                        map(() => [\n                            {\n                                name: file.name,\n\n                                /* base64 or link to the file on your server */\n                                link: String(fileReader.result),\n\n                                attrs: {\n                                    type: file.type,\n                                },\n                            },\n                        ]),\n                    );\n                },\n        },\n        {\n            provide: TUI_ATTACH_FILES_OPTIONS,\n            useValue: {\n                accept: 'application/pdf',\n                multiple: false,\n            },\n        },\n    ],\n    host: {\n        class: 'html5-editor-example',\n        '[class._e2e]': 'isE2E',\n    },\n})\nexport class TuiEditorEmbedPdfExample1 {\n    @ViewChild(TuiEditorComponent)\n    private readonly wysiwyg?: TuiEditorComponent;\n\n    readonly builtInTools = [\n        TuiEditorTool.Undo,\n        TuiEditorTool.Link,\n        TuiEditorTool.Attach,\n    ];\n\n    readonly control = new FormControl(\n        `\n            <p>sample.pdf</p>\n            <iframe\n                data-type=\"iframe-editor\"\n                src=\"https://mozilla.github.io/pdf.js/web/viewer.html?url=https://pdfobject.com/pdf/sample.pdf\"\n                width=\"100%\"\n                height=\"300\"\n            ></iframe>\n            <p>Hello world</p>\n            `,\n        Validators.required,\n    );\n\n    constructor(\n        @Inject(TUI_IS_E2E) readonly isE2E: boolean,\n        @Inject(DomSanitizer) private readonly sanitizer: DomSanitizer,\n    ) {}\n\n    @tuiPure\n    safe(content: string | null): SafeHtml {\n        return this.sanitizer.bypassSecurityTrustHtml(content ?? '');\n    }\n\n    attach([file]: Array<TuiEditorAttachedFile<{type: string}>>): void {\n        this.wysiwyg?.editorService\n            ?.getOriginTiptapEditor()\n            ?.chain()\n            .focus('end')\n            .createParagraphNear()\n            .insertContent(file.name)\n            .run();\n\n        this.wysiwyg?.editorService?.setIframe({\n            allowfullscreen: false,\n            frameborder: null,\n            // For example, src: `https://mozilla.github.io/pdf.js/web/viewer.html?url${file.link}`,\n            src: `data:application/pdf;base64${file.link}`,\n            width: '100%',\n            height: 300,\n        });\n    }\n}\n"}}]);