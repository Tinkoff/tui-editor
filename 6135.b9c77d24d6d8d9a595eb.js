(self.webpackChunktui_editor=self.webpackChunktui_editor||[]).push([[6135],{36135:n=>{n.exports="import {\n    ChangeDetectionStrategy,\n    Component,\n    Inject,\n    OnInit,\n    Self,\n    ViewChild,\n} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {TuiDestroyService} from '@taiga-ui/cdk';\nimport {\n    TUI_EDITOR_EXTENSIONS,\n    TuiEditorComponent,\n    TuiEditorTool,\n} from '@tinkoff/tui-editor';\nimport {Editor} from '@tiptap/core';\nimport {Subject} from 'rxjs';\nimport {debounceTime, takeUntil} from 'rxjs/operators';\n\nconst markdown = `# h1 Heading ðŸ˜Ž\n\n## h2 Heading\n\n### h3 Heading\n\n#### h4 Heading\n\n##### h5 Heading\n\n###### h6 Heading\n\n----\n\n![image info](./assets/icons/logo.svg)\n`;\n\n@Component({\n    selector: 'tui-editor-markdown-extension-example-1',\n    templateUrl: './index.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        {\n            provide: TUI_EDITOR_EXTENSIONS,\n            useValue: [\n                import('@tiptap/starter-kit').then(({StarterKit}) => StarterKit),\n                import('@tiptap/extension-image').then(({Image}) =>\n                    Image.configure({inline: true}),\n                ),\n                import('@tinkoff/tui-editor/extensions/markdown').then(({TuiMarkdown}) =>\n                    TuiMarkdown.configure({\n                        html: true, // Allow HTML input/output\n                        tightLists: true, // No <p> inside <li> in markdown output\n                        tightListClass: 'tight', // Add class to <ul> allowing you to remove <p> margins when tight\n                        bulletListMarker: '-', // <li> prefix in markdown output\n                        linkify: true, // Create links from \"https://...\" text\n                        breaks: true, // New lines (\\n) in markdown input are converted to <br>\n                        transformPastedText: true, // Allow to paste markdown text in the editor\n                        transformCopiedText: true, // Copied text is transformed to markdown\n                    }),\n                ),\n            ],\n        },\n        TuiDestroyService,\n    ],\n})\nexport class TuiEditorEditorExample1 implements OnInit {\n    @ViewChild(TuiEditorComponent)\n    private readonly editorRef?: TuiEditorComponent;\n\n    markdown$ = new Subject<string>();\n\n    readonly builtInTools = [TuiEditorTool.Undo];\n\n    control: FormControl = new FormControl(markdown);\n\n    constructor(\n        @Self()\n        @Inject(TuiDestroyService)\n        private readonly destroy$: TuiDestroyService,\n    ) {}\n\n    get editor(): Editor | null {\n        return this.editorRef?.editorService.getOriginTiptapEditor() ?? null;\n    }\n\n    get markdown(): string {\n        return this.editor?.storage?.markdown?.getMarkdown() ?? '';\n    }\n\n    ngOnInit(): void {\n        this.markdown$\n            .pipe(debounceTime(500), takeUntil(this.destroy$))\n            .subscribe(value => this.editor?.commands.setContent(value));\n    }\n}\n"}}]);